# TASK: demonstrate Central Limit Theorem from sample of 5 and 20 with histograms
library(ggplot2)
samp_data <- data.frame(income = sample(df, 1000, type = 'data_dist'))
samp_data <- data.frame(income = sample(df, 1000), type = 'data_dist')
df <- read.csv("loans_income.csv", header = TRUE)
setwd("/Users/susheel/Documents/GitHub/statistics-for-data-scientists/data")
df <- read.csv("loans_income.csv", header = TRUE)
samp_data <- data.frame(income = sample(df, 1000), type = 'data_dist')
df <- read.csv("loans_income.csv", header = TRUE)
samp_data <- data.frame(income = sample(df, 1000), type = 'data_dist')
samp_data <- data.frame(income = sample(df, 1000), type = 'data_dist', replace = TRUE)
samp_data <- data.frame(income = sample(df, 1000, replace = TRUE), type = 'data_dist')
samp_mean_5 <- data.frame(df = tapply(sample(loans_income, 1000*5), rep(1:1000, rep(5, 1000)), FUN = mean), type = 'mean_of_5')
samp_mean_5 <- data.frame(df = tapply(sample(df, 1000*5), rep(1:1000, rep(5, 1000)), FUN = mean), type = 'mean_of_5')
samp_mean_5 <- data.frame(df = tapply(sample(df, 1000*5, replace = TRUE), rep(1:1000, rep(5, 1000)), FUN = mean), type = 'mean_of_5')
# TASK: demonstrate Central Limit Theorem from sample of 5 and 20 with histograms
library(ggplot2)
df <- read.csv("loans_income.csv", header = TRUE)
samp_data <- data.frame(income = sample(df, 1000, replace = TRUE), type = 'data_dist')
samp_mean_5 <- data.frame(income = tapply(sample(df, 1000*5, replace = TRUE), rep(1:1000, rep(5, 1000)), FUN = mean), type = 'mean_of_5')
samp_mean_20 <- data.frame(income = tapply(sample(df, 1000*20, replace = TRUE), rep(1:1000, rep(20, 1000)), FUN = mean), type = 'mean_of_20')
income <- rbind(samp_data, samp_mean_5, samp_mean_20)
samp_data
colnames(samp_data)
colnames(samp_mean_5)
colnames(samp_mean_20)
sample(df, 1000, replace = TRUE)
df <- read.csv("loans_income.csv", header = TRUE)
df
samp_data <- data.frame(
income = sample(df, 1000),
type = 'data_dist')
samp_data <- data.frame(
income = df[sample(nrow(df), 1000, replace = FALSE, prob = NULL), ],
type = 'data_dist'
)
samp_data
samp_data <- data.frame(
income = df[sample(nrow(df), 1000, replace = TRUE, prob = NULL), ],
type = 'data_dist'
)
samp_data
samp_mean_5 <- data.frame(
income = tapply(sample(df, 1000*5, replace = TRUE),
rep(1:1000, rep(5, 1000)), FUN = mean),
type = 'mean_of_5')
setwd("/Users/susheel/Documents/GitHub/statistics-for-data-scientists/data")
# TASK: demonstrate Central Limit Theorem from sample of 5 and 20 with histograms
library(ggplot2)
df <- read.csv("loans_income.csv", header = TRUE)
#samp_data <- data.frame(
#  income = sample(df, 1000),
#  type = 'data_dist')
samp_data <- data.frame(
income = df[sample(nrow(df), 1000, replace = TRUE, prob = NULL), ],
type = 'data_dist'
)
samp_mean_5 <- data.frame(
income = tapply(sample(df, 1000*5, replace = TRUE),
rep(1:1000, rep(5, 1000)), FUN = mean),
type = 'mean_of_5')
samp_mean_20 <- data.frame(
income = tapply(sample(df, 1000*20, replace = TRUE),
rep(1:1000, rep(20, 1000)), FUN = mean),
type = 'mean_of_20')
income <- rbind(samp_data, samp_mean_5, samp_mean_20)
income$type = factor(income$type, levels = c('data_dist', 'mean_of_5', 'mean_of_20'), labels = c('Data', 'Mean of 5', 'Mean of 20'))
ggplot(income, aes(x = income)) + geom_histogram(bins = 40) + facet_grid(type ~ .)
samp_mean_5
samp_mean_5 <- data.frame(
income = tapply(df[sample(nrow(df), 1000 * 5, replace = TRUE), ],
rep(1:1000, rep(5, 1000)), FUN = mean),
type = 'mean_of_5')
samp_mean_5
samp_mean_20 <- data.frame(
income = tapply(df[sample(nrow(df), 1000 * 20, replace = TRUE), ],
rep(1:1000, rep(20, 1000)), FUN = mean),
type = 'mean_of_20')
income <- rbind(samp_data, samp_mean_5, samp_mean_20)
income$type = factor(income$type, levels = c('data_dist', 'mean_of_5', 'mean_of_20'), labels = c('Data', 'Mean of 5', 'Mean of 20'))
ggplot(income, aes(x = income)) + geom_histogram(bins = 40) + facet_grid(type ~ .)
samp_data
?tapply
samp_mean_5
sample(df, 1000 * 5)
sample(df, 1000 * 5, replace = TRUE)
samp_mean_5
ggplot(income, aes(x = income)) + geom_histogram(bins = 40) + facet_grid(type ~ .)
income
